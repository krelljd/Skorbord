@page "/score"
@layout BasicLayout
@rendermode InteractiveServer
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Score</PageTitle>
<div class="score-content">
    <FluentStack Orientation="Orientation.Horizontal" Wrap="true">
        @team1
        <FluentStack Orientation="Orientation.Horizontal" Wrap="false">
            <FluentButton IconStart="@(new Icons.Regular.Size48.ArrowCircleDown())"
                        OnClick="@(() => UpdateScore((int)CurrentSet, -1))" disabled="@(!IsConnected)"
                        Appearance="Appearance.Neutral"
                        Class="score-button">
            @scores[(int)CurrentSet]
            </FluentButton>
            <FluentButton IconStart="@(new Icons.Regular.Size48.ArrowCircleUp())"
                        OnClick="@(() => UpdateScore((int)CurrentSet, 1))" disabled="@(!IsConnected)"
                        Appearance="Appearance.Accent"
                        Class="score-button">
            @scores[(int)CurrentSet]
            </FluentButton>
        </FluentStack>
        @team2
        <FluentStack Orientation="Orientation.Horizontal" Wrap="false">
            <FluentButton IconStart="@(new Icons.Regular.Size48.ArrowCircleDown())"
                        OnClick="@(() => UpdateScore((int)CurrentSet + 1, -1))" disabled="@(!IsConnected)"
                        Appearance="Appearance.Neutral"
                        Class="score-button">
            @scores[(int)CurrentSet + 1]
            </FluentButton>
            <FluentButton IconStart="@(new Icons.Regular.Size48.ArrowCircleUp())"
                        OnClick="@(() => UpdateScore((int)CurrentSet + 1, 1))" disabled="@(!IsConnected)"
                        Appearance="Appearance.Accent"
                        Class="score-button">
            @scores[(int)CurrentSet + 1]
            </FluentButton>
        </FluentStack>
    </FluentStack>
    <br>
    <FluentStack>
        <div style="width:100%">
            Active Set<FluentListbox Items=@(Enum.GetValues<SetOptions>()) @bind-SelectedOption="@CurrentSet" />
        </div>
    </FluentStack>
    <br>
    <FluentStack Orientation="Orientation.Horizontal" Wrap="false">
        <FluentButton IconStart="@(new Icons.Regular.Size24.DismissSquare())"
                            OnClick="@(() => ResetSetScores((int)CurrentSet))" 
                            Disabled="@(!IsConnected)"
                            BackgroundColor="var(--error)"
                            Appearance="Appearance.Accent"
                            Class="reset-scores-button">
        Reset @CurrentSet Scores
        </FluentButton>
        <FluentButton IconStart="@(new Icons.Regular.Size24.DismissSquare())"
                            OnClick="@(() => ResetAllScores())"
                            Disabled="@(!IsConnected)"
                            BackgroundColor="var(--error)"
                            Appearance="Appearance.Accent"
                            Class="reset-scores-button">
        Reset Match Scores
        </FluentButton>
    </FluentStack>
    <hr>
    Administration
    <FluentStack Orientation="Orientation.Horizontal">
        <FluentTextField @bind-Value="@team1" Class="team-name-input" Placeholder="Team 1 Name"></FluentTextField>
        <ColorSelector CurrentColor="@team1Color" ReturnedColor="Team1ColorChanged" Style="width: 20vw;"></ColorSelector>
    </FluentStack>
    <FluentStack Orientation="Orientation.Horizontal">
        <FluentTextField @bind-Value="@team2" Class="team-name-input" Placeholder="Team 2 Name"></FluentTextField>
        <ColorSelector CurrentColor="@team2Color" ReturnedColor="Team2ColorChanged" Style="width: 20vw;"></ColorSelector>
    </FluentStack>
    <FluentStack Orientation="Orientation.Horizontal">
        <FluentTextField @bind-Value="@tournament" Class="team-name-input" Placeholder="Tournament Name"></FluentTextField>
        <ColorSelector CurrentColor="@scoreboardColor" ReturnedColor="BoardColorChanged" Style="width: 20vw;"></ColorSelector>
    </FluentStack>
    <br>
    <FluentButton IconStart="@(new Icons.Regular.Size24.Save())"
                    OnClick="@(UpdateMatchInfo)" 
                    Disabled="@(!IsConnected)"
                    Appearance="Appearance.Accent" 
                    Class="save-button">
    Save Match Info
    </FluentButton>
    <br>
    <hr>
    <FluentAccordion>
        <FluentAccordionItem Heading="Manual Scoring" HeadingLevel="2">
            <FluentIcon Value="@(new Icons.Regular.Size20.Edit())" Color="@Color.Neutral" Slot="start" />
            <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Center">
                <input class="score-input" Size="2" @bind="@scores[0]"></input>
                <input class="score-input" Size="2" @bind="@scores[2]"></input>
                <input class="score-input" Size="2" @bind="@scores[4]"></input>
            </FluentStack>
            <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Center">
                <input class="score-input" Size="2" @bind="@scores[1]"></input>
                <input class="score-input" Size="2" @bind="@scores[3]"></input>
                <input class="score-input" Size="2" @bind="@scores[5]"></input>
            </FluentStack>
            <br>
            <FluentButton IconStart="@(new Icons.Regular.Size24.Save())"
                    OnClick="@(UpdateScores)" 
                    Disabled="@(!IsConnected)"
                    Appearance="Appearance.Accent" 
                    Class="save-button">
            Save Scores
            </FluentButton>
        </FluentAccordionItem>
    </FluentAccordion>
    <br>
    <br>
</div>

@code {
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? team1 = "C757 15T Tsunami";
    private string? team2 = "Placeholder 15 National";
    private string team1Color = "#2EB1C5";
    private string team2Color = "#FFFFFF";
    private string scoreboardColor = "#D9D9D9";
    private string tournament = "Tournament";
    private int[] scores = new int[]{0,0,0,0,0,0};

    public enum SetOptions {
        Set1 = 0,
        Set2 = 2,
        Set3 = 4
    };

    private SetOptions CurrentSet;
    protected override async Task OnInitializedAsync()
    {
        var hubUrl = "https://skorbord.app/scorehub";
        hubConnection = new HubConnectionBuilder()
            .WithUrl(hubUrl, options => {
               //options.SkipNegotiation = true; 
            })
            .ConfigureLogging(logging =>
            {
                // Log to the Console
                logging.AddConsole();

                // This will set ALL logging to Debug level
                logging.SetMinimumLevel(LogLevel.Debug);
            })
            .Build();

        hubConnection.On<int[]>("UpdateScores", (scoreArray) =>
        {
            scores = scoreArray;
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string, string, string, string, string, string>("UpdateMatchInfo", (t1, t1Color, t2, t2Color, tName, sbColor) =>
        {
            team1 = t1;
            team2 = t2;
            team1Color = t1Color;
            team2Color = t2Color;
            tournament = tName;
            scoreboardColor = sbColor;
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task UpdateScores()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendScoresMessage", scores);
        }
    }

    private async Task UpdateScore(int index, int valueUpDown)
    {
        scores[index] = scores[index] + valueUpDown;
        await UpdateScores();
    }

    private async Task ResetSetScores(int index)
    {
        scores[index] = 0;
        scores[index + 1] = 0;
        await UpdateScores();
    }

    private async Task ResetAllScores()
    {
        scores = new int[]{0,0,0,0,0,0};
        await UpdateScores();
    }

    private async Task UpdateMatchInfo()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMatchInfoMessage", team1, team1Color, team2, team2Color, tournament, scoreboardColor);
        }
    }

    private void Team1ColorChanged(string e)
    {  
        team1Color = e;
        InvokeAsync(StateHasChanged);
    }

    private void Team2ColorChanged(string e)
    {
        team2Color = e;
        InvokeAsync(StateHasChanged);
    }

    private void BoardColorChanged(string e)
    {
        scoreboardColor = e;
        InvokeAsync(StateHasChanged);
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}